

@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    // Только если меньше контейнера
    #{$property}: $startSize + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  @else if $type==2 {
    // Только если больше контейнера
    #{$property}: $startSize + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  }

  @else {
    // Всегда
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}


//PX to VW conversion
//usage: width: get-vw(320px);
@function get-vw($font) {
    $vw-context: calc($maxWidth * 0.01 * 1px);
    @return calc($font / $vw-context * 1vw);
    @return $font;
}


//PX to REM
//usage: font-size: rem(14px); // or rem(14)
@function stripUnit($value) {
    @return $value / ($value * 0 + 1);
}
@function rem($pxValue) {
    @return #{stripUnit($pxValue) / stripUnit($html-font-size)}rem;
}


//adaptive font size
//usage: @include adaptive-font(64, 32)
@mixin adaptive-font($pcSize, $mobSize) {
    $addSize: $pcSize - $mobSize;
    $addMobSize: $addSize + $addSize * 0.7;

    @media (max-width: 767px) {
        font-size: calc(#{$mobSize + px} + #{$addMobSize} * ((100vw - 375px) / #{$maxWidth}));
    }

    @media (min-width: 767px) {
        font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$maxWidth}));
    }
}

//list counter
//usage: @include child-counter('> li', '', '\a'){...}
@mixin child-counter($child-selector, $content-before:'', $content-after:'') {
    $counter: unique-id();
    list-style-type: none;
    counter-reset: $counter;

    & #{$child-selector} {
        counter-increment: $counter;

        &:before {
            content: '#{$content-before}'counter($counter) '#{$content-after}';
            @content;
        }
    }
}



